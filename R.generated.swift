//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `API`.
    static let apI = Rswift.FileResource(bundle: R.hostingBundle, name: "API", pathExtension: "")
    /// Resource file `GenerateResource.sh`.
    static let generateResourceSh = Rswift.FileResource(bundle: R.hostingBundle, name: "GenerateResource", pathExtension: "sh")
    /// Resource file `Reference`.
    static let reference = Rswift.FileResource(bundle: R.hostingBundle, name: "Reference", pathExtension: "")
    /// Resource file `SwiftLintRule`.
    static let swiftLintRule = Rswift.FileResource(bundle: R.hostingBundle, name: "SwiftLintRule", pathExtension: "")
    
    /// `bundle.url(forResource: "API", withExtension: "")`
    static func apI(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.apI
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GenerateResource", withExtension: "sh")`
    static func generateResourceSh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.generateResourceSh
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Reference", withExtension: "")`
    static func reference(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.reference
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SwiftLintRule", withExtension: "")`
    static func swiftLintRule(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftLintRule
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 1 localization keys.
    struct localizable {
      /// zh-Hans translation: 标签
      /// 
      /// Locales: zh-Hans, en, zh-Hant
      static let tag = Rswift.StringResource(key: "tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans", "en", "zh-Hant"], comment: nil)
      
      /// zh-Hans translation: 标签
      /// 
      /// Locales: zh-Hans, en, zh-Hant
      static func tag(_: Void = ()) -> String {
        return NSLocalizedString("tag", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
